package routes

import (
	"encoding/json"
	"errors"
	"fmt"
	"html/template"
	"math/rand"
	"net/http"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/gorilla/mux"
	"github.com/mkstyl3/linkedin_jobs/middleware"
	"github.com/mkstyl3/linkedin_jobs/models"
	"github.com/mkstyl3/linkedin_jobs/sessions"
	"github.com/mkstyl3/linkedin_jobs/utils"
	"github.com/rs/zerolog/log"
	"gorm.io/gorm"
)

var companies []models.Company

func clearPreloadedCompanies() {
	companies = nil
}

func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

func NewRouter() *mux.Router {
	r := mux.NewRouter()
	r.HandleFunc("/", middleware.AuthRequired(indexGetHandler)).Methods("GET")
	r.HandleFunc("/", middleware.AuthRequired(indexPostHandler)).Methods("POST")
	r.HandleFunc("/login", loginGetHandler).Methods("GET")
	r.HandleFunc("/login", loginPostHandler).Methods("POST")
	r.HandleFunc("/bar", barGetHandler).Methods("GET")
	r.HandleFunc("/addjobs", addJobsGetHandler).Methods("GET")
	r.HandleFunc("/addjobs", addJobsPostHandler).Methods("POST")
	r.HandleFunc("/company-names", CompanyNamesGetHandler).Methods("GET")
	r.HandleFunc("/programming-skill-names", ProgrammingSkillNamesGetHandler).Methods("GET")
	fs := http.FileServer(http.Dir("./static/"))
	r.PathPrefix("/static/").Handler(http.StripPrefix("/static/", fs))
	return r
}

func addJobsGetHandler(w http.ResponseWriter, r *http.Request) {
	type Parcel struct {
		Chart        template.HTML
		CompanySizes interface{}
		Schedules    interface{}
		EnglishLevels interface{}
	}
	chartTemplate := CreateBarChart(w)
	// A Database call here
	sizes := []models.CompanySize{}
	err := models.GetAll(&sizes)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Info().Err(err).Msg(fmt.Sprint("No company sizes found"))
		} else {
			log.Fatal().Err(err).Msg(fmt.Sprint("Error retrieving all company sizes"))
		}
	}
	log.Info().Msg(fmt.Sprintf("Retrieved companies: %+v", sizes))
	schedules := []models.Schedules{}
	err = models.GetAll(&schedules)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Info().Err(err).Msg(fmt.Sprint("No schedules found"))
		} else {
			log.Fatal().Err(err).Msg(fmt.Sprint("Error retrieving all schedules"))
		}
	}
	log.Info().Msg(fmt.Sprintf("Retrieved schedules: %+v", schedules))

	// Preload companies
	companies := []models.Company{}
	err = models.GetAll(&companies)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Info().Err(err).Msg(fmt.Sprint("No companies found"))
		} else {
			log.Fatal().Err(err).Msg(fmt.Sprint("Error retrieving all companies"))
		}
	}
	log.Info().Msg(fmt.Sprintf("Retrieved companies: %+v", companies))

	// Preload companies
	englishLevels := []models.EnglishLevels{}
	err = models.GetAll(&englishLevels)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			log.Info().Err(err).Msg(fmt.Sprint("No english levels found"))
		} else {
			log.Fatal().Err(err).Msg(fmt.Sprint("Error retrieving all english levels"))
		}
	}
	log.Info().Msg(fmt.Sprintf("Retrieved english levels: %+v", companies))

	parcel := Parcel{Chart: chartTemplate, CompanySizes: sizes, Schedules: schedules, EnglishLevels: englishLevels}
	utils.ExecuteTemplate(w, "add-jobs.html", parcel)
}

func addJobsPostHandler(w http.ResponseWriter, r *http.Request) {

}

func barGetHandler(w http.ResponseWriter, r *http.Request) {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	//bar.Render(w)
	bar.Renderer = utils.NewSnippetRenderer(bar, bar.Validate)
	// bar.Render(w)
	chart := utils.RenderToHtml(bar)

	utils.ExecuteTemplate(w, "index.html", chart)

}

func GetListOfMatchedWords(firstLetters string, allWords []string) []string {
	var result []string
	for _, word := range allWords {
		if lenFirstLetters := len(firstLetters); len(word) >= lenFirstLetters {
			if word[0:lenFirstLetters] == firstLetters {
				result = append(result, word)
			}
		}
	}
	return result
}

func ProgrammingSkillNamesGetHandler(w http.ResponseWriter, r *http.Request) {
	all_models_ := []models.ProgrammingSkill{}
	models.GetAll(&all_models_)
	bytes, err := json.Marshal(all_models_)

	if err != nil {
		log.Error().Msg("Error Marshaling list")
	} else {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		w.Write(bytes)
	}
}

func CompanyNamesGetHandler(w http.ResponseWriter, r *http.Request) {
	companies := []models.Company{}
	models.GetAll(&companies)
	// var company_names []string
	// for _, n := range companies {
	// 	company_names = append(company_names, n.Name)
	// }
	bytes, err := json.Marshal(companies)

	if err != nil {
		log.Error().Msg("Error Marshaling list")
	} else {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		w.Write(bytes)
	}

	// id := r.URL.Query().Get("name")
	// log.Info().Msg(id)

	// type Bird struct {
	// 	Species     string
	// 	Description string
	// }

	// log.Info().Msg(fmt.Sprintf("Retrieved companies: %+v", companies))
	// u := person{Name: "Shashank", LastName: "Tiwari", Age: 30}
	// jsonResponse, jsonError := json.Marshal(u)
	// if jsonError != nil {
	// 	fmt.Println("Unable to encode JSON")
	// }

	// fmt.Println(string(jsonResponse))

	// w.Header().Set("Content-Type", "application/json")
	// w.WriteHeader(http.StatusOK)

	// birdJson := `[{"species":"pigeon","decription":"likes to perch on rocks"},{"species":"eagle","description":"bird of prey"}]`
	// // exam := `["aguacate", "bertoromero"]`
	// tmp := `[
	// "3Com Corp",
	// "3M Company",
	// "A.G. Edwards Inc",
	// "AÃ¶bott Laboratories",
	// "Abercrombie & Fitch Co",
	// "ABM Industries Incorporated",
	// "Ace Hardware Corporation",
	// "ACT Manufacturing Inc",
	// "Acterna Corp",
	// "Adams Resources & Energy, Inc",
	// "ADC Telecommunications, Inc",
	// "Adelphia Communications Corporation",
	// "Administaff, Inc",
	// "Adobe Systems Incorporated",
	// "Adolph Coors Company",
	// "Advance Auto Parts, Inc",
	// "Advanced Micro Devices, Inc",
	// "AdvancePCS, Inc",
	// "Advantica Restaurant Group, Inc",
	// "The AES Corporation",
	// "Aetna Inc",
	// "Affiliated Computer Services, Inc",
	// "AFLAC Incorporated",
	// "AGCO Corporation",
	// "Agilent Technologies, Inc",
	// "Agway Inc",
	// "Apartment Investment and Management Company",
	// "Air Products and Chemicals, Inc",
	// "Airborne, Inc",
	// "Airgas, Inc",
	// "AK Steel Holding Corporation",
	// "Alaska Air Group, Inc",
	// "Alberto-Culver Company",
	// "Albertsons, Inc",
	// "Alcoa Inc",
	// "Alleghany Corporation",
	// "Allegheny Energy, Inc",
	// "Allegheny Technologies Incorporated",
	// "Allergan, Inc",
	// "ALLETE, Inc",
	// "Alliant Energy Corporation",
	// "Allied Waste Industries, Inc",
	// "Allmerica Financial Corporation",
	// "The Allstate Corporation",
	// "ALLTEL Corporation",
	// "The Alpine Group, Inc",
	// "Amazon.com, Inc",
	// "AMC Entertainment Inc",
	// "American Power Conversion Corporation",
	// "Amerada Hess Corporation",
	// "AMERCO",
	// "Ameren Corporation",
	// "America West Holdings Corporation",
	// "American Axle & Manufacturing Holdings, Inc",
	// "American Eagle Outfitters, Inc",
	// "American Electric Power Company, Inc",
	// "American Express Company",
	// "American Financial Group, Inc",
	// "American Greetings Corporation",
	// "American International Group, Inc",
	// "American Standard Companies Inc",
	// "American Water Works Company, Inc",
	// "AmerisourceBergen Corporation",
	// "Ames Department Stores, Inc",
	// "Amgen Inc",
	// "Amkor Technology, Inc",
	// "AMR Corporation",
	// "AmSouth Bancorp",
	// "Amtran, Inc",
	// "Anadarko Petroleum Corporation",
	// "Analog Devices, Inc",
	// "Anheuser-Busch Companies, Inc",
	// "Anixter International Inc",
	// "AnnTaylor Inc",
	// "Anthem, Inc",
	// "AOL Time Warner Inc",
	// "Aon Corporation",
	// "Apache Corporation",
	// "Apple Computer, Inc",
	// "Applera Corporation",
	// "Applied Industrial Technologies, Inc",
	// "Applied Materials, Inc",
	// "Aquila, Inc",
	// "ARAMARK Corporation",
	// "Arch Coal, Inc",
	// "Archer Daniels Midland Company",
	// "Arkansas Best Corporation",
	// "Armstrong Holdings, Inc",
	// "Arrow Electronics, Inc",
	// "ArvinMeritor, Inc",
	// "Ashland Inc",
	// "Astoria Financial Corporation",
	// "AT&T Corp",
	// "Atmel Corporation",
	// "Atmos Energy Corporation",
	// "Audiovox Corporation",
	// "Autoliv, Inc",
	// "Automatic Data Processing, Inc",
	// "AutoNation, Inc",
	// "AutoZone, Inc",
	// "Avaya Inc",
	// "Avery Dennison Corporation",
	// "Avista Corporation",
	// "Avnet, Inc",
	// "Avon Products, Inc",
	// "Baker Hughes Incorporated",
	// "Ball Corporation",
	// "Bank of America Corporation",
	// "The Bank of New York Company, Inc",
	// "Bank One Corporation",
	// "Banknorth Group, Inc",
	// "Banta Corporation",
	// "Barnes & Noble, Inc",
	// "Bausch & Lomb Incorporated",
	// "Baxter International Inc",
	// "BB&T Corporation",
	// "The Bear Stearns Companies Inc",
	// "Beazer Homes USA, Inc",
	// "Beckman Coulter, Inc"]`

	// var birds []Bird
	// json.Unmarshal([]byte(birdJson), &birds)
	// fmt.Printf("Birds : %+v", birds)

	// w.Write([]byte(tmp))

	// sliceExample := []string{"hello", "arroba"}
	// matched_words := routes.GetListOfMatchedWords("a", sliceExample)
	// log.Info().Msg(fmt.Sprintf("Retrieved schedules: %+v", matched_words))

}

func CreateBarChart(w http.ResponseWriter) template.HTML {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	//bar.Renderer = utils.NewSnippetRenderer(bar, bar.Validate)
	return utils.RenderToHtml(bar)
}

func indexGetHandler(w http.ResponseWriter, r *http.Request) {
	// comments, err := models.GetCommentsDb()

	// if err != nil {
	// 	w.WriteHeader((http.StatusInternalServerError))
	// 	w.Write([]byte("Internal Server Error"))
	// 	return
	// }

	// create User table

	// t, err := template.ParseFiles("static/index.html")
	// if err != nil {
	// 	return
	// }

	// err = t.Execute(f, comments)
	// if err != nil {
	// 	return
	// }
	// f.Close()

	// Output HTML
	// t, err := template.ParseFiles("templates/index.html")
	// if err != nil {
	// 	return
	// }
	// f, err := os.Create("index.html")
	// err = t.Execute(f, nil)

	utils.ExecuteTemplate(w, "dashboard.html", nil)

}

func indexPostHandler(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	input_str := r.PostForm.Get("comment")
	_, err := models.PostCommentsDb(models.Comment{Text: input_str})

	if err != nil {
		w.WriteHeader((http.StatusInternalServerError))
		w.Write([]byte("Internal Server Error"))
		return
	}
	http.Redirect(w, r, "/", 302)
}

func loginGetHandler(w http.ResponseWriter, r *http.Request) {
	utils.ExecuteTemplate(w, "login.html", nil)
}

func loginPostHandler(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	username := r.PostForm.Get("username")
	password := r.PostForm.Get("password")
	err := models.AuthenticateUser(username, password)
	if err != nil {
		switch err {
		case models.ErrUserNotFound:
			utils.ExecuteTemplate(w, "login.html", "unknown user")
		case models.ErrInvalidLogin:
			utils.ExecuteTemplate(w, "login.html", "invalid login")
		default:
			w.WriteHeader((http.StatusInternalServerError))
			w.Write([]byte("Internal Server Error"))
		}
		return
	}
	session, _ := sessions.Store.Get(r, "session")
	session.Values["username"] = username
	session.Save(r, w)
	http.Redirect(w, r, "/", 302)
}
