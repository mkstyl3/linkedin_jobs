package routes

import (
	"html/template"
	"math/rand"
	"net/http"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/gorilla/mux"
	"github.com/mkstyl3/linkedin_jobs/middleware"
	"github.com/mkstyl3/linkedin_jobs/models"
	"github.com/mkstyl3/linkedin_jobs/sessions"
	"github.com/mkstyl3/linkedin_jobs/utils"
)

func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

func NewRouter() *mux.Router {
	r := mux.NewRouter()
	r.HandleFunc("/", middleware.AuthRequired(indexGetHandler)).Methods("GET")
	r.HandleFunc("/", middleware.AuthRequired(indexPostHandler)).Methods("POST")
	r.HandleFunc("/login", loginGetHandler).Methods("GET")
	r.HandleFunc("/bar", barGetHandler).Methods("GET")
	r.HandleFunc("/login", loginPostHandler).Methods("POST")
	fs := http.FileServer(http.Dir("./static/"))
	r.PathPrefix("/static/").Handler(http.StripPrefix("/static/", fs))
	return r
}

func CreateBarChart(w http.ResponseWriter) template.HTML {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	//bar.Renderer = utils.NewSnippetRenderer(bar, bar.Validate)
	return utils.RenderToHtml(bar)
}

func barGetHandler(w http.ResponseWriter, r *http.Request) {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	//bar.Render(w)
	bar.Renderer = utils.NewSnippetRenderer(bar, bar.Validate)
	// bar.Render(w)
	chart := utils.RenderToHtml(bar)

	utils.ExecuteTemplate(w, "index.html", chart)

}

func indexGetHandler(w http.ResponseWriter, r *http.Request) {
	// comments, err := models.GetCommentsDb()

	// if err != nil {
	// 	w.WriteHeader((http.StatusInternalServerError))
	// 	w.Write([]byte("Internal Server Error"))
	// 	return
	// }
	tpl := CreateBarChart(w)

	// t, err := template.ParseFiles("static/index.html")
	// if err != nil {
	// 	return
	// }

	// err = t.Execute(f, comments)
	// if err != nil {
	// 	return
	// }
	// f.Close()

	// Output HTML
	// t, err := template.ParseFiles("templates/index.html")
	// if err != nil {
	// 	return
	// }
	// f, err := os.Create("index.html")
	// err = t.Execute(f, nil)

	utils.ExecuteTemplate(w, "index.html", tpl)

}

func indexPostHandler(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	input_str := r.PostForm.Get("comment")
	_, err := models.PostCommentsDb(models.Comment{Text: input_str})

	if err != nil {
		w.WriteHeader((http.StatusInternalServerError))
		w.Write([]byte("Internal Server Error"))
		return
	}
	http.Redirect(w, r, "/", 302)
}

func loginGetHandler(w http.ResponseWriter, r *http.Request) {
	utils.ExecuteTemplate(w, "login.html", nil)
}

func loginPostHandler(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()
	username := r.PostForm.Get("username")
	password := r.PostForm.Get("password")
	err := models.AuthenticateUser(username, password)
	if err != nil {
		switch err {
		case models.ErrUserNotFound:
			utils.ExecuteTemplate(w, "login.html", "unknown user")
		case models.ErrInvalidLogin:
			utils.ExecuteTemplate(w, "login.html", "invalid login")
		default:
			w.WriteHeader((http.StatusInternalServerError))
			w.Write([]byte("Internal Server Error"))
		}
		return
	}
	session, _ := sessions.Store.Get(r, "session")
	session.Values["username"] = username
	session.Save(r, w)
	http.Redirect(w, r, "/", 302)
}
